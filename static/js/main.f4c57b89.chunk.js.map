{"version":3,"sources":["components/content/Quote.js","components/content/Author.js","components/Content.js","components/action/Twitter.js","components/action/NewQuote.js","components/Action.js","components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","id","style","textAlign","fontFamily","fontSize","fontStyle","selectedQuote","quote","Author","padding","author","Content","className","marginBottom","Twitter","style1","backgroundColor","selectedColor","width","borderRadius","target","href","color","NewQuote","onClick","assignNewQuoteIndex","Action","display","justifyContent","QuoteMachine","height","style2","margin","boxShadow","App","state","quotes","selectedIndex","bgColor","generateNewQuoteIndex","bind","fetch","then","response","json","setState","this","length","Math","floor","random","colorIndex","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4c57b89.chunk.js","sourcesContent":["import React from 'react';\n\nconst Quote = (props) => {\n    const style = {\n        textAlign: 'center',\n        fontFamily: 'Serif',\n        fontSize: '30px',\n        fontStyle: 'italic'\n    }\n    return (\n        <div id = 'text' style = {style}>\n            \"{props.selectedQuote.quote}\"     \n        </div>\n    )\n}\n\nexport default Quote","import React from 'react';\n\nconst Author = (props) => {\n\n    const style = {\n        textAlign: 'right',\n        padding: '2% 0%',\n        fontSize: '18px',\n        fontFamily: 'Cursive'\n    }\n    return (\n        <div id = 'author' style = {style}>\n            - {props.selectedQuote.author}\n        </div>\n    )\n}\n\nexport default Author","import React from 'react';\nimport Quote from './content/Quote'\nimport Author from './content/Author'\n\nconst Content = (props) => {\n    const style = {\n        marginBottom: '30px'\n    }\n    return (\n        <div className = 'content' style = {style}>\n            <Quote selectedQuote = {props.selectedQuote}/>\n            <Author selectedQuote = {props.selectedQuote} />\n        </div>\n    )\n}\n\nexport default Content","import React from 'react';\n\nconst Twitter = (props) => {\n    const style1 = {\n        backgroundColor: props.selectedColor,\n        width: '50px',\n        borderRadius: '5px'\n    }\n\n    const style2 = {\n        color: '#fff',\n        fontSize: '25px',\n        padding: '2px'\n        \n    }\n    return (\n        <button style = {style1} >\n            <a id = 'tweet-quote'  target = '_blank' href= {`https://twitter.com/intent/tweet?text=${props.selectedQuote.quote}`}>\n                <i style = {style2} className =\"fa fa-twitter\"></i>\n            </a>\n        </button>\n    )\n}\n\nexport default Twitter","import React from 'react';\n\nconst NewQuote = (props) => {\n    const style = {\n        backgroundColor: props.selectedColor,\n        width: '90px',\n        borderRadius: '5px',\n        color: '#fff',\n        fontSize: '15px',\n        padding: '3px',\n        fontFamily: 'Lora',\n        textAlign: 'center'\n        \n    }\n    return (\n        <button  style = {style} id = 'new-quote'  onClick = {props.assignNewQuoteIndex}>\n            New quote\n        </button>\n\n    )\n}\n\nexport default NewQuote","import React from 'react';\nimport Twitter from './action/Twitter';\nimport NewQuote from './action/NewQuote';\n\nconst Action = (props) => {\n\n    const style = {\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n    return (\n        <div className = 'action' style = {style}>\n            <Twitter selectedColor = {props.selectedColor} selectedQuote = {props.selectedQuote}/>\n            <NewQuote selectedColor = {props.selectedColor} assignNewQuoteIndex = {props.assignNewQuoteIndex}/>\n        </div>\n    )\n}\n\nexport default Action\n","import React from 'react';\nimport Content from './Content';\nimport Action from './Action';\n\n\n\nconst QuoteMachine = (props) => {\n    const style1 = {\n        display: 'flex',\n        height: '100vh',\n        width: '100vw',\n        backgroundColor: props.selectedColor\n\n    }\n    const style2 = {\n        \n        width: '40vw',\n        margin: 'auto',\n        backgroundColor: '#fff',\n        color: props.selectedColor,\n        padding: '15px 30px' ,\n        borderRadius: '5%',\n        boxShadow: '5px'\n    }\n    return (\n    <div id = 'main' style = {style1}>\n        <div id = 'quote-box' style = {style2}>\n            <Content selectedQuote = {props.selectedQuote}/>\n            <Action selectedColor = {props.selectedColor} selectedQuote = {props.selectedQuote} assignNewQuoteIndex = {props.assignNewQuoteIndex}/>\n        </div>\n    </div>\n  )\n}\n\nexport default QuoteMachine","import React, { Component } from 'react';\nimport QuoteMachine from './components/QuoteMachine';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      selectedIndex: null,\n      bgColor: ['#e54d42', '#f37b1d', '#fbbd08', '#8dc63f',\n                '#39b54a','#1cbbb4', '#6739b6',\n                '#a5673f','#8799a3','#8AD6CC','#F99192','#385A7C']\n    };\n    \n    this.generateNewQuoteIndex = this.generateNewQuoteIndex.bind(this)\n    this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')    \n    .then(response => response.json())\n    .then( (quotes) => this.setState({ quotes }, this.assignNewQuoteIndex))\n  }\n\n  /**\n   * return integer between 0 and the length of quotes\n   */\n  generateNewQuoteIndex() {\n    if (!this.state.quotes.length) {\n      return undefined\n    }\n      return Math.floor(Math.random()* (this.state.quotes.length))\n  }\n\n  get selectedQuote() { \n    if (!this.state.quotes.length) {\n      return undefined\n    }\n    return this.state.quotes[this.state.selectedIndex]\n  }\n\n  get selectedColor() {\n    if (!this.state.quotes.length) {\n      return undefined\n    }\n\n    let colorIndex = this.state.selectedIndex % this.state.bgColor.length\n    \n    return this.state.bgColor[colorIndex]\n  }\n\n\n  assignNewQuoteIndex() {\n    this.setState({\n      selectedIndex: this.generateNewQuoteIndex() \n    })\n  }\n  \n  render() {\n    return (\n      this.selectedQuote ? \n      <QuoteMachine selectedQuote = {this.selectedQuote} \n        assignNewQuoteIndex = {this.assignNewQuoteIndex}\n        selectedColor = {this.selectedColor}/>\n       : null \n    )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}